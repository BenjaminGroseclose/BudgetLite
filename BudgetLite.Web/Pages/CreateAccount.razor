@page "/signup"
@using BudgetLite.Data.Models
@using BudgetLite.Web.Authentication
@using Microsoft.AspNetCore.Identity
@using System.ComponentModel.DataAnnotations

@inject ISnackbar snackbar
@inject UserManager<User> userManager;
@inject AuthenticationStateProvider authenticationStateProvider;
@inject NavigationManager navigationManager;

<PageTitle>BudgetLite - Sign up</PageTitle>

<EditForm Model="@model" OnValidSubmit="OnValidSubmit" style="max-width: 800px; margin: auto;">
    <DataAnnotationsValidator />

    <MudCard>
        <MudCardHeader>
            <MudText Typo="Typo.h5">Create Account</MudText>
        </MudCardHeader>
        <MudCardContent>
            <MudTextField Label="Username" @bind-Value="model.Username" For="@(() => model.Username)" />
            <MudTextField Label="First Name" @bind-Value="model.FirstName" For="@(() => model.FirstName)" />
            <MudTextField Label="Last Name" @bind-Value="model.LastName" For="@(() => model.LastName)" />
            <MudTextField Label="Email" @bind-Value="model.Email" For="@(() => model.Email)"
                InputType="InputType.Email" />
            <MudTextField Label="Password" @bind-Value="model.Password" For="@(() => model.Password)"
                InputType="InputType.Password" />
            <MudTextField Label="Confirm Password" @bind-Value="model.ConfirmPassword"
                          For="@(() => model.ConfirmPassword)" InputType="InputType.Password" />
        </MudCardContent>
        <MudCardActions Class="ml-auto">
            <MudButton Variant="Variant.Outlined" Color="Color.Error" Class="ml-auto mr-3" Href="/">Cancel</MudButton>
            <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Success">Register</MudButton>
        </MudCardActions>
    </MudCard>

</EditForm>

@code {

    private class Model
    {
        [Required]
        public string Username { get; set; }

        [Required]
        public string FirstName { get; set; }

        [Required]
        public string LastName { get; set; }

        [Required]
        [EmailAddress]
        public string Email { get; set; }

        [Required]
        [DataType(DataType.Password)]
        [StringLength(20, ErrorMessage = "Password must be between 20 and 8 characters", MinimumLength = 8)]
        //[RegularExpression("^((?=.*?[A-Z])(?=.*?[a-z])(?=.*?[0-9])|(?=.*?[A-Z])(?=.*?[a-z])(?=.*?[^a-zA-Z0-9])|(?=.*?[A-Z])(?=.*?[0-9])(?=.*?[^a-zA-Z0-9])|(?=.*?[a-z])(?=.*?[0-9])(?=.*?[^a-zA-Z0-9])).{8,}$", ErrorMessage = "Passwords must be at least 8 characters and contain at 3 of 4 of the following: upper case (A-Z), lower case (a-z), number (0-9) and special character (e.g. !@#$%^&*)")]
        public string Password { get; set; }

        [Required]
        [DataType(DataType.Password)]
        [Compare(nameof(Password), ErrorMessage = "The passwords do not match.")]
        public string ConfirmPassword { get; set; }
    }

    Model model = new Model();

    bool loginErrorOccured = false;
    string errorMessage = string.Empty;

    private async Task OnValidSubmit(EditContext context)
    {
        User newUser = new User(
            firstName: model.FirstName,
            lastName: model.LastName,
            email: model.Email,
            username: model.Username
        );

        var result = await this.userManager.CreateAsync(newUser, model.Password);

        if (result.Succeeded)
        {
            var customAuthenticationStateProvider = (CustomAuthenticationStateProvider)this.authenticationStateProvider;

            await customAuthenticationStateProvider.UpdateAuthenticationState(new UserSession(
                newUser.UserName,
                newUser.Email,
                $"{newUser.FirstName} {newUser.LastName}",
                newUser.Id
            ));

            navigationManager.NavigateTo("/");
        }
        else
        {
            this.snackbar.Add(result.Errors.ElementAt(0).Description, Severity.Error);
        }

        StateHasChanged();
    }
}
