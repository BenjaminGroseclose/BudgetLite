@page "/budgets"
@using BudgetLite.Data.Enums;
@attribute [Authorize]

@inject AuthenticationStateProvider authenticationStateProvider;
@inject IRepository<Budget> budgetRepository

<!-- TODO: Add Filters -->
<MudExpansionPanels Style="margin: auto;">
    <MudExpansionPanel Style="max-width: 1000px;">
        <TitleContent>
            <div style="display: flex">
                <MudIcon Class="mt-1 mr-3" Icon="@Icons.Filled.Add" />
                <MudText Typo="Typo.h6">Add New Budget</MudText>
            </div>
        </TitleContent>
        <ChildContent>
            <AddEditReadBudget Budget="null" ReloadBudgetList="Reload" />
        </ChildContent>
    </MudExpansionPanel>

    @foreach(Budget budget in rootBudgets)
    {
        <BudgetPanel Budget="budget" ReloadBudgetList="Reload" />
    }

</MudExpansionPanels>


<!-- List Active Budgets in last modified date order (future allow option to customize) -->

@code {
    bool loading = false;
    int userID = 0;
    IEnumerable<Budget> rootBudgets = new List<Budget>();

    protected override async Task OnInitializedAsync()
    {
        var authState = await authenticationStateProvider.GetAuthenticationStateAsync();
        var currentUser = authState.User;

        if (currentUser.Claims.Any() == false)
        {
            return;
        }

        userID = int.Parse(currentUser.Claims.First(x => x.Type == ClaimTypes.NameIdentifier).Value);

        rootBudgets = this.budgetRepository.GetAll().Where(x => x.UserID == userID && x.ParentBudgetID == null);

        await base.OnInitializedAsync();
    }

    public void Reload()
    {
        rootBudgets = this.budgetRepository.GetAll().Where(x => x.UserID == userID && x.ParentBudgetID == null);
        this.StateHasChanged();
    }
}
