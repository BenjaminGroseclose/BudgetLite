@page "/transactions"
@using static BudgetLite.Web.Shared.Dialogs.AddUpdateTransaction;
@attribute [Authorize]

@inject AuthenticationStateProvider AuthenticationStateProvider;
@inject IRepository<Transaction> TransactionRepository
@inject IRepository<BudgetPeriod> BudgetPeriodRepository
@inject IDialogService DialogService

<div>
    <MudButton OnClick="OpenAddTransactionDialog" Class="mb-3" Variant="Variant.Outlined" Color="Color.Primary">
        <MudIcon Icon="@Icons.Filled.Add" />
        Transaction
    </MudButton>
    <MudDatePicker
        Class="ml-auto"
        Label="Start Date"
        AutoClose="true"
        />
    <MudDatePicker
        Class="ml-auto"
        Label="End Date"
        AutoClose="true"
        />
</div>
<!-- TODO: Add date to pull transaction between -->
<MudTable Items="@transactions" SelectedItem="selectedTransaction" Hover="true" Filter="new Func<Transaction,bool>(FilterFunc1)">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Transactions</MudText>
        <MudSpacer />
        <MudTextField @bind-Value="searchString" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <HeaderContent>
        <MudTh>Budget Name</MudTh>
        <MudTh>Amount</MudTh>
        <MudTh>Catagory</MudTh>
        <MudTh>Date</MudTh>
        <MudTh>Notes</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Budget Name">@context.BudgetPeriod.Budget.Name</MudTd>
        <MudTd DataLabel="Amount">$ @context.Amount</MudTd>
        <MudTd DataLabel="Catagory">@context.Catagory</MudTd>
        <MudTd DataLabel="Date">@context.Date.ToShortDateString()</MudTd>
        <MudTh DataLabel="Notes">@context.Notes</MudTh>
    </RowTemplate>
</MudTable>

@code {
    string searchString = "";
    int userID = 0;
    IEnumerable<Transaction> transactions = new List<Transaction>();
    Transaction selectedTransaction;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var currentUser = authState.User;

        if (currentUser.Claims.Any() == false)
        {
            return;
        }

        userID = int.Parse(currentUser.Claims.First(x => x.Type == ClaimTypes.NameIdentifier).Value);

        transactions = this.TransactionRepository.GetAll().Where(x => x.UserID == userID).OrderByDescending(x => x.Date);

        await base.OnInitializedAsync();
    }

    private async Task OpenAddTransactionDialog()
    {
        var parameters = new DialogParameters { ["UserID"] = userID, ["Transaction"] = null };

        var dialog = this.DialogService.Show<AddUpdateTransaction>("Add Transaction", parameters);
        var result = await dialog.Result;

        if (!result.Cancelled)
        {
            AddUpdateTransactionModel data = (AddUpdateTransactionModel)result.Data;
            await AddTransaction(data);
        }
    }

    private bool FilterFunc1(Transaction element) => FilterFunc(element, searchString);

    private bool FilterFunc(Transaction element, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (element.BudgetPeriod.Budget.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.Catagory.ToString().Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.Notes != null && element.Notes.Contains(searchString))
            return true;
        if (element.Date.ToShortDateString().Contains(searchString))
            return true;
        return false;
    }

    private async Task AddTransaction(AddUpdateTransactionModel data)
    {
        if (data == null)
        {
            throw new ArgumentNullException("Data cannot be null");
        }

        BudgetPeriod? bugetPeriod = this.BudgetPeriodRepository.GetAll().FirstOrDefault(x =>
            x.BudgetID == data.BudgetID &&
            x.StartDate <= data.Date &&
            x.EndDate >= data.Date
        );

        DateTime transactionDate = data.Date.Value;

        if (bugetPeriod == null)
        {
            int endOfMonth = DateTime.DaysInMonth(transactionDate.Year, transactionDate.Month);

            bugetPeriod = await this.BudgetPeriodRepository.Insert(new BudgetPeriod
            {
                BudgetID = data.BudgetID,
                DurationType = data.DurationType,
                BudgetAmount = data.BudgetAmount,
                StartDate = new DateTime(month: transactionDate.Month, day: 1, year: transactionDate.Year),
                EndDate = new DateTime(month: transactionDate.Month, day: endOfMonth, year: transactionDate.Year)
            });
        }

        var insertedTransaction = await this.TransactionRepository.Insert(new Transaction
        {
            BudgetPeriodID = bugetPeriod.BudgetPeriodID,
            Amount = data.Amount,
            Date = transactionDate,
            Notes = data.Notes,
            Catagory = data.Catagory,
            UserID = this.userID
        });
    }
}
