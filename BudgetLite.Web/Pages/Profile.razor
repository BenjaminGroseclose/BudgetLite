@page "/profile"
@using System.ComponentModel.DataAnnotations;
@using Microsoft.AspNetCore.Identity;

@inject ISnackbar snackbar
@inject UserManager<User> userManager;
@inject AuthenticationStateProvider authenticationStateProvider;
@inject IDialogService dialogService

<div id="profile">
    <EditForm Model="@model" OnValidSubmit="SaveAsync">
        <DataAnnotationsValidator />
        <MudCard>
            <MudCardHeader>
                <MudText Typo="Typo.h6">Profile</MudText>               
            </MudCardHeader>
            <MudCardContent>
            @if (errors.Any())
            {
                foreach(var error in errors)
                {
                    <MudText Color="Color.Error" Typo="Typo.body2">@error</MudText>
                }
            }

            <MudTextField Disabled="!isEdit" Label="First Name" @bind-Value="model.FirstName" For="@(() => model.FirstName)" Variant="Variant.Text" />
            <MudTextField Disabled="!isEdit" Label="Last Name" @bind-Value="model.LastName" For="@(() => model.LastName)" Variant="Variant.Text" />
            <MudTextField Disabled="!isEdit" HelperText="The username used to login" Label="Username" @bind-Value="model.UserName" For="@(() => model.UserName)" Variant="Variant.Text" />
            <MudTextField Disabled="!isEdit" Label="Email" @bind-Value="model.Email" For="@(() => model.Email)" Variant="Variant.Text" />
            <MudTextField Disabled="!isEdit" Label="Monthly Income" @bind-Value="model.MonthlyIncome" For="@(() => model.MonthlyIncome)" Adornment="Adornment.Start" AdornmentColor="Color.Success" AdornmentIcon="@Icons.Material.Filled.AttachMoney" />
            </MudCardContent>
            <MudCardActions>
                @if (isEdit)
                {
                    <MudButton Class="ml-auto" OnClick="() => isEdit = false" Color="Color.Error" Variant="Variant.Outlined">Cancel</MudButton>
                    <MudButton Class="ml-2" ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Success">
                        @if (isLoading)
                        {
                            <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                        }
                        else
                        {
                            <MudText>Save</MudText>
                        }
                    </MudButton>
                }
                else
                {
                    <MudButton Class="ml-auto" OnClick="() => isEdit = true" Color="Color.Primary" Variant="Variant.Outlined">Update</MudButton>
                }
            </MudCardActions>
        </MudCard>    
    </EditForm>

    <EditForm Model="@passwordModel" OnValidSubmit="ConfirmUpdatePassword">
        <DataAnnotationsValidator />
        <MudCard Class="mt-5">
            <MudCardHeader>
                <MudText Typo="Typo.h6">Change Password</MudText>
            </MudCardHeader>
            <MudCardContent>
                @if (passwordErrors.Any())
                {
                    @foreach(string error in passwordErrors)
                    {
                        <MudText Color="Color.Error" Typo="Typo.body2">@error</MudText>
                    }
                }
                <MudTextField Label="Password" @bind-Value="passwordModel.OldPassword" For="@(() => passwordModel.OldPassword)"
                              InputType="InputType.Password" />
                <MudTextField Label="Password" @bind-Value="passwordModel.NewPassword" For="@(() => passwordModel.NewPassword)"
                              InputType="InputType.Password" />
                <MudTextField Label="Confirm Password" @bind-Value="passwordModel.NewPasswordConfirm"
                              For="@(() => passwordModel.NewPasswordConfirm)" InputType="InputType.Password" />
            </MudCardContent>
            <MudCardActions>
                <MudButton Class="ml-auto" ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Success">Save</MudButton>
            </MudCardActions>
        </MudCard>
    </EditForm>

    <MudButton Class="mt-5" OnClick="DeleteAccount" Variant="Variant.Outlined" Color="Color.Error">
        <MudIcon Icon="@Icons.Filled.Delete" />
        Delete Account
    </MudButton>
</div>

@code {
    bool isLoading = false;
    bool isEdit = false;
    Model model = new Model();
    PasswordModel passwordModel = new PasswordModel();
    User? user;
    IEnumerable<string> errors = new List<string>();
    IEnumerable<string> passwordErrors = new List<string>();

    protected override async Task OnInitializedAsync()
    {
        var authState = await authenticationStateProvider.GetAuthenticationStateAsync();
        var currentUser = authState.User;

        if (currentUser.Claims.Any() == false)
        {
            return;
        }

        int userID = int.Parse(currentUser.Claims.First(x => x.Type == ClaimTypes.NameIdentifier).Value);

        this.user = await this.userManager.FindByIdAsync(userID.ToString());

        if (this.user == null)
        {
            this.snackbar.Add($"Failed to fetch user profile, please refresh.", Severity.Error);
        }
        else
        {
            this.model = new Model(user);
        }
    }

    public async Task ConfirmUpdatePassword()
    {
        var dialog = this.dialogService.Show<ConfirmPasswordUpdate>("Confirm Password Update");
        var result = await dialog.Result;

        if (!result.Cancelled && this.user != null)
        {
            var changePasswordResult = await this.userManager.ChangePasswordAsync(this.user, this.passwordModel.OldPassword, this.passwordModel.NewPassword);

            if (changePasswordResult.Succeeded)
            {
                this.snackbar.Add($"Successfully updated {this.user.UserName}'s password.", Severity.Success);
                this.passwordErrors = new List<string>();
            }
            else
            {
                this.passwordErrors = changePasswordResult.Errors.Select(x => x.Description);
            }
        }
    }

    public void DeleteAccount()
    {
        // TODO
    }

    public async Task SaveAsync()
    {
        isLoading = true;
        await Task.Delay(1); // Needed for loading spinner

        if (user == null)
        {
            return;
        }

        this.user.FirstName = model.FirstName;
        this.user.LastName = model.LastName;
        this.user.UserName = model.UserName;
        this.user.Email = model.Email;
        this.user.MonthlyIncome = model.MonthlyIncome;

        var result = this.userManager.UpdateAsync(this.user);

        if (result.IsCompletedSuccessfully)
        {
            this.snackbar.Add($"Successfully updated {this.user.UserName}'s profile.", Severity.Success);
            isEdit = false;
        }
        else
        {
            this.snackbar.Add($"Failed to update updated {this.user.UserName}'s profile, please try again.", Severity.Error);
        }

        isLoading = false;
    }

    private class Model
    {
        public Model() { }

        public Model(User user)
        {
            if (user == null)
            {
                return;
            }

            this.FirstName = user.FirstName;
            this.LastName = user.LastName;
            this.UserName = user.UserName;
            this.Email = user.Email;
            this.MonthlyIncome = user.MonthlyIncome;
        }

        [Required]
        public string FirstName { get; set; }

        [Required]
        public string LastName { get; set; }

        [Required]
        public string UserName { get; set; }

        [Required]
        public string Email { get; set; }

        [Required]
        public decimal MonthlyIncome { get; set; }
    }

    private class PasswordModel
    {
        [Required]
        public string OldPassword { get; set; }

        [Required]
        [DataType(DataType.Password)]
        [StringLength(20, ErrorMessage = "Passwords must be between 20 and 8 characters", MinimumLength = 8)]
        //[RegularExpression("^((?=.*?[A-Z])(?=.*?[a-z])(?=.*?[0-9])|(?=.*?[A-Z])(?=.*?[a-z])(?=.*?[^a-zA-Z0-9])|(?=.*?[A-Z])(?=.*?[0-9])(?=.*?[^a-zA-Z0-9])|(?=.*?[a-z])(?=.*?[0-9])(?=.*?[^a-zA-Z0-9])).{8,}$", ErrorMessage = "Passwords must be at least 8 characters and contain at 3 of 4 of the following: upper case (A-Z), lower case (a-z), number (0-9) and special character (e.g. !@#$%^&*)")]
        public string NewPassword { get; set; }

        [Required]
        [DataType(DataType.Password)]
        [Compare(nameof(NewPassword), ErrorMessage = "The new passwords do not match.")]
        public string NewPasswordConfirm { get; set; }
    }
}
