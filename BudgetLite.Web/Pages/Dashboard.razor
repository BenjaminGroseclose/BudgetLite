@using static BudgetLite.Web.Shared.Dialogs.AddUpdateTransaction;
@inject AuthenticationStateProvider AuthenticationStateProvider;
@inject IRepository<Transaction> TransactionRepository
@inject IRepository<BudgetPeriod> BudgetPeriodRepository
@inject IDialogService DialogService

<div class="d-flex justify-space-between">
    <MudText Typo="Typo.h4">Dashboard</MudText>

    <div class="d-flex">
        <MudButton Href="budgets" Class="mr-3" Variant="Variant.Outlined" Color="Color.Primary">
            <MudIcon Icon="@Icons.Filled.Add" />
            Budget
        </MudButton>

        <MudButton OnClick="OpenAddTransactionDialog" Variant="Variant.Outlined" Color="Color.Primary">
            <MudIcon Icon="@Icons.Filled.Add" />
            Transaction
        </MudButton>
    </div>
</div>

<div class="d-flex justify-space-between">
    <div>
        <MudTable Items="@transactions.Take(10)">
            <ToolBarContent>
                <MudText Typo="Typo.h6">Transactions</MudText>
                <MudSpacer />
            </ToolBarContent>
            <HeaderContent>
                <MudTh>Budget Name</MudTh>
                <MudTh>Amount</MudTh>
                <MudTh>Catagory</MudTh>
                <MudTh>Date</MudTh>
                <MudTh>Notes</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="Budget Name">@context.BudgetPeriod.Budget.Name</MudTd>
                <MudTd DataLabel="Amount">$ @context.Amount</MudTd>
                <MudTd DataLabel="Catagory">@context.Catagory</MudTd>
                <MudTd DataLabel="Date">@context.Date.ToShortDateString()</MudTd>
                <MudTh DataLabel="Notes">@context.Notes</MudTh>
            </RowTemplate>
        </MudTable>
        <MudButton Href="transactions" Class="mt-3" Variant="Variant.Filled" Color="Color.Secondary">
            View All
        </MudButton>
    </div>
    <div>
    </div>

</div>



@code {
    int userID = 0;
    IEnumerable<Transaction> transactions = new List<Transaction>();

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var currentUser = authState.User;

        if (currentUser.Claims.Any() == false)
        {
            return;
        }

        userID = int.Parse(currentUser.Claims.First(x => x.Type == ClaimTypes.NameIdentifier).Value);

        transactions = this.TransactionRepository.GetAll().Where(x => x.UserID == userID).OrderByDescending(d => d.Date);

        await base.OnInitializedAsync();
    }

    private async Task OpenAddTransactionDialog()
    {
        var parameters = new DialogParameters { ["UserID"] = userID, ["Transaction"] = null };

        var dialog = this.DialogService.Show<AddUpdateTransaction>("Add Transaction", parameters);
        var result = await dialog.Result;

        if (!result.Cancelled)
        {
            AddUpdateTransactionModel data = (AddUpdateTransactionModel)result.Data;
            await AddTransaction(data);
        }
    }

    private async Task AddTransaction(AddUpdateTransactionModel data)
    {
        if (data == null)
        {
            throw new ArgumentNullException("Data cannot be null");
        }

        BudgetPeriod? bugetPeriod = this.BudgetPeriodRepository.GetAll().FirstOrDefault(x =>
            x.BudgetID == data.BudgetID &&
            x.StartDate <= data.Date &&
            x.EndDate >= data.Date
        );

        DateTime transactionDate = data.Date.Value;

        if (bugetPeriod == null)
        {
            int endOfMonth = DateTime.DaysInMonth(transactionDate.Year, transactionDate.Month);

            bugetPeriod = await this.BudgetPeriodRepository.Insert(new BudgetPeriod
            {
                BudgetID = data.BudgetID,
                DurationType = data.DurationType,
                BudgetAmount = data.BudgetAmount,
                StartDate = new DateTime(month: transactionDate.Month, day: 1, year: transactionDate.Year),
                EndDate = new DateTime(month: transactionDate.Month, day: endOfMonth, year: transactionDate.Year)
            });
        }

        var insertedTransaction = await this.TransactionRepository.Insert(new Transaction
        {
            BudgetPeriodID = bugetPeriod.BudgetPeriodID,
            Amount = data.Amount,
            Date = transactionDate,
            Notes = data.Notes,
            Catagory = data.Catagory,
            UserID = this.userID,
            Name = data.Name
        });

        if (insertedTransaction != null)
        {
            transactions = this.TransactionRepository.GetAll().Where(x => x.UserID == userID).OrderByDescending(d => d.Date);
        }
    }
}
