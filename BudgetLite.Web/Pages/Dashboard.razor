@using static BudgetLite.Web.Shared.Dialogs.AddUpdateTransaction;
@inject AuthenticationStateProvider AuthenticationStateProvider;
@inject IRepository<Transaction> TransactionRepository
@inject IRepository<BudgetPeriod> BudgetPeriodRepository
@inject IDialogService DialogService

<div class="d-flex justify-space-between">
    <MudText Typo="Typo.h4">Dashboard</MudText>

    <div class="d-flex">
        <MudButton Href="budgets" Class="mr-3" Variant="Variant.Outlined" Color="Color.Primary">
            <MudIcon Icon="@Icons.Filled.Add" />
            Budget
        </MudButton>

        <MudButton OnClick="OpenAddTransactionDialog" Variant="Variant.Outlined" Color="Color.Primary">
            <MudIcon Icon="@Icons.Filled.Add" />
            Transaction
        </MudButton>
    </div>
</div>

<div>
    <div>
        <MudTable Items="@transactions.Take(10)">
            <ToolBarContent>
                <MudText Typo="Typo.h6">Transactions</MudText>
                <MudSpacer />
            </ToolBarContent>
            <HeaderContent>
                <MudTh>Name</MudTh>
                <MudTh>Amount</MudTh>
                <MudTh>Catagory</MudTh>
                <MudTh>Budget</MudTh>
                <MudTh>Date</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="Name">@context.Name</MudTd>
                <MudTd DataLabel="Amount">$ @context.Amount</MudTd>
                <MudTd DataLabel="Budget">@context.BudgetPeriod.Budget.Name</MudTd>
                <MudTd DataLabel="Catagory">@context.Catagory</MudTd>
                <MudTd DataLabel="Date">@context.Date.ToShortDateString()</MudTd>
            </RowTemplate>
        </MudTable>
        <MudButton Href="transactions" Class="mt-3" Variant="Variant.Filled" Color="Color.Secondary">
            View All
        </MudButton>
    </div>
    <MudCard Class="d-flex justify-space-evenly mt-6">
        <!-- TODO: Figoure out constant colors -->
        <MudChart ChartType="ChartType.Donut" Width="300px" Height="300px" InputData="@transactionData" InputLabels="@transactionLabels" />
        
        <div class="mt-6">
            <MudTable Items="@groupedTransaction" SortLabel="Sort By">
                <HeaderContent>
                    <MudTh></MudTh>
                    <MudTh><MudTableSortLabel SortBy="new Func<IGrouping<Budget, Transaction>, object>(x=> x.Key.Name)">Name</MudTableSortLabel></MudTh>
                    <MudTh><MudTableSortLabel SortBy="new Func<IGrouping<Budget, Transaction>, object>(x=> x.Select(x => x.Amount).Sum())">Amount</MudTableSortLabel></MudTh>
                    <MudTh><MudTableSortLabel SortBy="new Func<IGrouping<Budget, Transaction>, object>(x=> x.Key.Name)">%</MudTableSortLabel></MudTh>
                    <MudTh><MudTableSortLabel SortBy="new Func<IGrouping<Budget, Transaction>, object>(x=> x.OrderByDescending(x => x.CreatedDate).FirstOrDefault()?.CreatedDate.ToShortDateString())">Last Transaction Date</MudTableSortLabel></MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd><MudIcon Class="mt-1 mr-3" Icon="@Helpers.BudgetIcon(@context.Key.Catagory)" /></MudTd>
                    <MudTd DataLabel="Name">@context.Key.Name</MudTd>
                    <MudTd DataLabel="Amount">@context.Select(x => x.Amount).Sum()</MudTd>
                    <MudTd DataLabel="%">@(((@context.Select(x => x.Amount).Sum() / totalTransactionAmount) * 100).ToString("#.##"))%</MudTd>
                    <MudTd DataLabel="Last Transaction Date">@context.OrderByDescending(x => x.CreatedDate).FirstOrDefault()?.CreatedDate.ToShortDateString()</MudTd>
                </RowTemplate>
            </MudTable>
        </div>
        
    </MudCard>

</div>



@code {
    int graphIndex = -1;
    int userID = 0;

    double[] transactionData;
    string[] transactionLabels;

    double totalTransactionAmount;

    IEnumerable<IGrouping<Budget, Transaction>> groupedTransaction;
    IEnumerable<Transaction> transactions = new List<Transaction>();

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var currentUser = authState.User;

        if (currentUser.Claims.Any() == false)
        {
            return;
        }

        userID = int.Parse(currentUser.Claims.First(x => x.Type == ClaimTypes.NameIdentifier).Value);

        transactions = this.TransactionRepository.GetAll().Where(x => x.UserID == userID).OrderByDescending(d => d.Date);

        ChartData();

        await base.OnInitializedAsync();
    }

    private void ChartData()
    {
        totalTransactionAmount = this.transactions.Select(x => x.Amount).Sum();

        List<string> labels = new List<string>();
        List<double> data = new List<double>();

        this.groupedTransaction = this.transactions.GroupBy(x => x.BudgetPeriod.Budget);

        foreach (var transaction in groupedTransaction)
        {
            labels.Add(transaction.Key.Name);
            data.Add(transaction.Select(x => x.Amount).Sum());
        }

        this.transactionData = data.ToArray();
        this.transactionLabels = labels.ToArray();
    }

    private async Task OpenAddTransactionDialog()
    {
        var parameters = new DialogParameters { ["UserID"] = userID, ["Transaction"] = null };

        var dialog = this.DialogService.Show<AddUpdateTransaction>("Add Transaction", parameters);
        var result = await dialog.Result;

        if (!result.Cancelled)
        {
            AddUpdateTransactionModel data = (AddUpdateTransactionModel)result.Data;
            await AddTransaction(data);
        }
    }

    private async Task AddTransaction(AddUpdateTransactionModel data)
    {
        if (data == null)
        {
            throw new ArgumentNullException("Data cannot be null");
        }

        BudgetPeriod? bugetPeriod = this.BudgetPeriodRepository.GetAll().FirstOrDefault(x =>
            x.BudgetID == data.BudgetID &&
            x.StartDate <= data.Date &&
            x.EndDate >= data.Date
        );

        DateTime transactionDate = data.Date.Value;

        if (bugetPeriod == null)
        {
            int endOfMonth = DateTime.DaysInMonth(transactionDate.Year, transactionDate.Month);

            bugetPeriod = await this.BudgetPeriodRepository.Insert(new BudgetPeriod
            {
                BudgetID = data.BudgetID,
                DurationType = data.DurationType,
                BudgetAmount = data.BudgetAmount,
                StartDate = new DateTime(month: transactionDate.Month, day: 1, year: transactionDate.Year),
                EndDate = new DateTime(month: transactionDate.Month, day: endOfMonth, year: transactionDate.Year)
            });
        }

        var insertedTransaction = await this.TransactionRepository.Insert(new Transaction
        {
            BudgetPeriodID = bugetPeriod.BudgetPeriodID,
            Amount = data.Amount,
            Date = transactionDate,
            Notes = data.Notes,
            Catagory = data.Catagory,
            UserID = this.userID,
            Name = data.Name
        });

        if (insertedTransaction != null)
        {
            transactions = this.TransactionRepository.GetAll().Where(x => x.UserID == userID).OrderByDescending(d => d.Date);

            ChartData();
        }
    }
}
