@page "/periods"
@attribute [Authorize]

@inject AuthenticationStateProvider authenticationStateProvider;
@inject IRepository<BudgetPeriod> budgetPeriodRepository

<MudText Typo="Typo.h6">Periods</MudText>
<MudText Typo="Typo.caption">
    Budget periods are process automatically behind the scenes. When a transaction is created against a budget we 
    automatically assign that transaction to a budget period based on the date of the transaction.
</MudText>
<!-- TODO: Figure out best way to handle multiple DurationTypes -->
@*<MudRadioGroup Class="mt-2" T="DurationType" SelectedOptionChanged="LoadBudgetPeriodForDuration">
    <!--<MudRadio Option="@(DurationType.WEEKLY)">Weekly</MudRadio> -->
    <MudRadio Option="@(DurationType.MONTHLY)">Monthly</MudRadio>
    <MudRadio Option="@(DurationType.QUARTERLY)">Quarterly</MudRadio>
    <MudRadio Option="@(DurationType.YEARLY)">Yearly</MudRadio>
</MudRadioGroup>*@

<!-- Should have an option to view all budget periods for a budget -->
<!-- 
    Should show warning if exceed budget amount in a period also should be easy to see how 
    much money is left in the period.
-->
@foreach(BudgetPeriod budgetPeriod in this.budgetsPeriods)
{
    <MudCard Class="mt-5">
        <MudCardHeader>
            <MudIcon Class="mt-1 mr-3" Icon="@Helpers.BudgetIcon(budgetPeriod.Budget.Catagory)" />
            <MudText Typo="Typo.h6">@budgetPeriod.Budget.Name - @budgetPeriod.StartDate.ToString("MMMM yyyy")</MudText>
        </MudCardHeader>
        <MudCardContent>
            <MudStack Row="true">
                <MudChart Style="width: fit-content" ChartOptions="@options" LegendPosition="Position.Bottom" ChartType="ChartType.Donut" Height="200px" InputData="GetData(budgetPeriod)" InputLabels="@chartLabels">
                    <CustomGraphics>
                        <MudText Typo="Typo.caption">
                            <MudText Typo="Typo.subtitle1" Color="PeriodColor(budgetPeriod.AmountSpent, budgetPeriod.BudgetAmount)" Class="mb-6">
                                <b>@CalcPercentage(budgetPeriod.AmountSpent, budgetPeriod.BudgetAmount)</b>
                            </MudText>
                        </MudText>
                    </CustomGraphics>
                </MudChart>
                <MudTable Items="@budgetPeriod.Transactions.OrderByDescending(x => x.Amount).Take(5)" Class="ml-4">
                    <HeaderContent>
                        <MudTh>Name</MudTh>
                        <MudTh>Amount</MudTh>
                        <MudTh>%</MudTh>
                        <MudTh>Date</MudTh>
                    </HeaderContent>
                    <RowTemplate>
                        <MudTd DataLabel="Name">@context.Name</MudTd>
                        <MudTd DataLabel="Amount">@context.Amount.ToString("C")</MudTd>
                        <MudTd DataLabel="%">@(((context.Amount / @budgetPeriod.AmountSpent) * 100).ToString("#.##"))%</MudTd>
                        <MudTd DataLabel="Last Transaction Date">@context.Date.ToShortDateString()</MudTd>
                    </RowTemplate>
                </MudTable>
            </MudStack>
        </MudCardContent>
        <MudCardActions>
            <MudButton Color="Color.Primary" Variant="Variant.Outlined" Href="@TransactionURL(budgetPeriod.BudgetPeriodID)">View All Transactions</MudButton>
        </MudCardActions>
    </MudCard>
}

@code {
    int userID = 0;
    IEnumerable<BudgetPeriod> budgetsPeriods = new List<BudgetPeriod>();
    string[] chartLabels = new string[] { "Amount Left", "Amount Spent" };
    ChartOptions options = new ChartOptions()
    {
        ChartPalette = new string[]
        {
            Colors.Grey.Default,
            Colors.Green.Default
        }
    };

    protected override async Task OnInitializedAsync()
    {
        var authState = await authenticationStateProvider.GetAuthenticationStateAsync();
        var currentUser = authState.User;

        if (currentUser.Claims.Any() == false)
        {
            return;
        }

        userID = int.Parse(currentUser.Claims.First(x => x.Type == ClaimTypes.NameIdentifier).Value);

        this.LoadBudgetPeriodForDuration(DurationType.MONTHLY);

        await base.OnInitializedAsync();
    }

    private string TransactionURL(int budgetPeriodID)
    {
        return $"transactions?budgetPeriodID={budgetPeriodID}";
    }

    private void LoadBudgetPeriodForDuration(DurationType durationType)
    {
        this.budgetsPeriods = this.budgetPeriodRepository
            .GetAll()
            .Where(x => x.Budget.UserID == userID && 
                   x.DurationType == durationType &&
                   DateTime.Today.Between(x.StartDate, x.EndDate));
    }

    private double[] GetData(BudgetPeriod budgetPeriod)
    {
        double totalAmountSpend = budgetPeriod.Transactions.Select(x => x.Amount).Sum();

        return new double[]
        {
            budgetPeriod.BudgetAmount - totalAmountSpend,
            totalAmountSpend
        };
    }

    private string CalcPercentage(double amountSpent, double budgetAmount)
    {
        return $"{Math.Round(((amountSpent / budgetAmount) * 100), 2)}%";
    }

    private Color PeriodColor(double amountSpent, double budgetAmount)
    {
        return amountSpent <= budgetAmount ? Color.Success : Color.Error;
    }
}
