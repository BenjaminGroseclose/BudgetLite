@page "/periods"
@attribute [Authorize]

@inject AuthenticationStateProvider authenticationStateProvider;
@inject IRepository<BudgetPeriod> budgetPeriodRepository

<MudText Typo="Typo.h6">Periods</MudText>
<MudText Typo="Typo.caption">
    Budget periods are process automatically behind the scenes. When a transaction is created against a budget we 
    automatically assign that transaction to a budget period based on the date of the transaction.
</MudText>
<!-- TODO: Add Datepicker -->
<MudRadioGroup Class="mt-2" T="DurationType" SelectedOptionChanged="LoadBudgetPeriodForDuration">
    <!--<MudRadio Option="@(DurationType.WEEKLY)">Weekly</MudRadio> -->
    <MudRadio Option="@(DurationType.MONTHLY)">Monthly</MudRadio>
    <MudRadio Option="@(DurationType.QUARTERLY)">Quarterly</MudRadio>
    <MudRadio Option="@(DurationType.YEARLY)">Yearly</MudRadio>
</MudRadioGroup>

@foreach(BudgetPeriod budgetPeriod in this.budgetsPeriods)
{
    <MudCard>
        <MudCardHeader>
            <MudIcon Class="mt-1 mr-3" Icon="@Helpers.BudgetIcon(budgetPeriod.Budget.Catagory)" />
            <MudText Typo="Typo.h6">@budgetPeriod.Budget.Name @budgetPeriod.StartDate.ToShortDateString() - @budgetPeriod.EndDate.ToShortDateString()</MudText>
        </MudCardHeader>
        <MudCardContent>
            <MudProgressLinear Size="Size.Medium" Rounded="true" Color="PeriodColor(budgetPeriod.AmountSpent, budgetPeriod.BudgetAmount)" Min="0" Max="budgetPeriod.BudgetAmount" Value="budgetPeriod.AmountSpent">
                <MudText Typo="Typo.subtitle1" Color="PeriodColor(budgetPeriod.AmountSpent, budgetPeriod.BudgetAmount)" Class="mb-6">
                    <b>@CalcPercentage(budgetPeriod.AmountSpent, budgetPeriod.BudgetAmount)</b>
                </MudText>
            </MudProgressLinear>
        </MudCardContent>
        <MudCardActions>
            <MudButton Color="Color.Primary" Variant="Variant.Outlined">View Transactions</MudButton>
        </MudCardActions>
    </MudCard>
}

@code {
    bool loading = false;
    int userID = 0;
    IEnumerable<BudgetPeriod> budgetsPeriods = new List<BudgetPeriod>();

    protected override async Task OnInitializedAsync()
    {
        var authState = await authenticationStateProvider.GetAuthenticationStateAsync();
        var currentUser = authState.User;

        if (currentUser.Claims.Any() == false)
        {
            return;
        }

        userID = int.Parse(currentUser.Claims.First(x => x.Type == ClaimTypes.NameIdentifier).Value);

        this.LoadBudgetPeriodForDuration(DurationType.MONTHLY);

        await base.OnInitializedAsync();
    }

    private void LoadBudgetPeriodForDuration(DurationType durationType)
    {
        this.budgetsPeriods = this.budgetPeriodRepository
            .GetAll()
            .Where(x => x.Budget.UserID == userID && 
                   x.DurationType == durationType &&
                   DateTime.Today.Between(x.StartDate, x.EndDate));
    }

    private string CalcPercentage(double amountSpent, double budgetAmount)
    {
        return $"{Math.Round(((amountSpent / budgetAmount) * 100), 2)}%";
    }

    private Color PeriodColor(double amountSpent, double budgetAmount)
    {
        return amountSpent <= budgetAmount ? Color.Success : Color.Error;
    }
}
