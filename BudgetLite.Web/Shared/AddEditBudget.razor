@using System.ComponentModel.DataAnnotations
@using BudgetLite.Data.Enums
@using BudgetLite.Data;
@using System.Security.Claims;

@inject IRepository<Budget> BudgetRepository
@inject AuthenticationStateProvider AuthenticationStateProvider

<EditForm Model="@model" OnValidSubmit="SaveAsync"style="max-width: 800px; margin: auto;">
    <DataAnnotationsValidator />
    <MudCard>
        <MudCardContent>
            <MudTextField Class="mt-2" Label="Budget Name" @bind-Value="model.Name" For="@(() => model.Name)" Variant="Variant.Text" />
            <MudTextField Class="mt-2" Label="Description" @bind-Value="model.Description" For="@(() => model.Description)" Variant="Variant.Outlined" Lines="2" />
            <MudSelect Class="mt-2" @bind-bind-Valu="model.Catagory" For="(() => model.Catagory)" Variant="Variant.Outlined">
                <MudSelectItem Value="@(Catagory.MortgageOrRent)">Mortgage or Rent</MudSelectItem>
                <MudSelectItem Value="@(Catagory.Transportation)" />
                <MudSelectItem Value="@(Catagory.Food)" />
                <MudSelectItem Value="@(Catagory.Utilities)" />
                <MudSelectItem Value="@(Catagory.Medical)" />
                <MudSelectItem Value="@(Catagory.Debt)" />
                <MudSelectItem Value="@(Catagory.Entertainment)" />
                <MudSelectItem Value="@(Catagory.Savings)" />
            </MudSelect>
            <MudTextField Class="mt-2"
                Label="Amount" 
                Variant="Variant.Outlined"
                @bind-Value="model.Amount"
                For="@(() => model.Amount)"
                Adornment="Adornment.Start"
                AdornmentColor="Color.Success"
                AdornmentIcon="@Icons.Material.Filled.AttachMoney">
            </MudTextField>
            <MudRadioGroup Class="mt-2" T="DurationType" @bind-bind-SelectedOption="model.DurationType">
                <MudRadio Option="@(DurationType.WEEKLY)">Weekly</MudRadio>
                <MudRadio Option="@(DurationType.MONTHLY)">Monthly</MudRadio>
                <MudRadio Option="@(DurationType.QUARTERLY)">Quarterly</MudRadio>
                <MudRadio Option="@(DurationType.YEARLY)">Yearly</MudRadio>
            </MudRadioGroup>
        </MudCardContent>
        <MudCardActions>
            <MudButton Class="ml-auto" ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Success">
                @if (isLoading)
                {
                    <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                }
                else
                {
                    <MudText>Save</MudText>
                }
            </MudButton>
        </MudCardActions>
    </MudCard>
</EditForm>

@code {

    [Parameter]
    public Budget Budget { get; set; }

    Model model = new Model();
    bool isLoading = false;

    protected override void OnInitialized()
    {
        if (Budget == null)
        {
            model = new Model();
        }
        else
        {
            model = new Model(Budget);
        }

        base.OnInitialized();
    }

    public async Task SaveAsync()
    {
        try
        {
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var currentUser = authState.User;

            int userID = int.Parse(currentUser.Claims.First(x => x.Type == ClaimTypes.NameIdentifier).Value);

            await BudgetRepository.Insert(new Budget()
                {
                    Name = model.Name,
                    Description = model.Description,
                    Catagory = model.Catagory,
                    Amount = model.Amount,
                    UserID = userID
                });
        }
        catch (Exception ex)
        {
            if (ex != null)
            {

            }

            throw;
        }

    }

    private class Model
    {
        public Model() { }

        public Model(Budget budget)
        {
            this.Name = budget.Name;
            this.Description = budget.Description;
            this.Catagory = budget.Catagory;
            this.Amount = budget.Amount;
            this.DurationType = budget.DurationType;
        }

        [Required]
        [MaxLength(80)]
        public string Name { get; set; }

        [MaxLength(1000)]
        public string Description { get; set; }

        public Catagory Catagory { get; set; }

        [Required]
        [Range(0.0, double.MaxValue, ErrorMessage = "Amount must be greater than 0.")]
        public double Amount { get; set; }

        [Required]
        public DurationType DurationType { get; set; }
    }
}
