@using System.ComponentModel.DataAnnotations;
@using BudgetLite.Data.Enums;

@inject ISnackbar snackbar
@inject IRepository<Budget> BudgetRepository
@inject AuthenticationStateProvider AuthenticationStateProvider

<EditForm Model="@model" OnValidSubmit="SaveAsync">
    <DataAnnotationsValidator />
    <MudDialog>
        <TitleContent>
            <MudText Typo="Typo.h6">
                <MudIcon Icon="@Icons.Material.Filled.AttachMoney" Class="mr-3 mb-n1" />
                Add Sub Budget
            </MudText>
        </TitleContent>
        <DialogContent>
            <MudDivider />
            <MudTextField Class="mt-2" Label="Budget Name" @bind-Value="model.Name" For="@(() => model.Name)" Variant="Variant.Text" />
            <MudTextField Class="mt-2" Label="Description" @bind-Value="model.Description" For="@(() => model.Description)" Variant="Variant.Outlined" Lines="2" />
            <MudSelect Disabled=true Class="mt-2" @bind-Value="model.Catagory" For="(() => model.Catagory)" Variant="Variant.Outlined">
                <MudSelectItem Value="@(Catagory.MortgageOrRent)">Mortgage or Rent</MudSelectItem>
                <MudSelectItem Value="@(Catagory.Transportation)" />
                <MudSelectItem Value="@(Catagory.Food)" />
                <MudSelectItem Value="@(Catagory.Utilities)" />
                <MudSelectItem Value="@(Catagory.Medical)" />
                <MudSelectItem Value="@(Catagory.Debt)" />
                <MudSelectItem Value="@(Catagory.Entertainment)" />
                <MudSelectItem Value="@(Catagory.Savings)" />
            </MudSelect>
            <MudTextField Class="mt-2"
                Label="Amount" 
                Variant="Variant.Outlined"
                @bind-Value="model.Amount"
                For="@(() => model.Amount)"
                Adornment="Adornment.Start"
                AdornmentColor="Color.Success"
                AdornmentIcon="@Icons.Material.Filled.AttachMoney">
            </MudTextField>
            <MudRadioGroup Class="mt-2" T="DurationType" @bind-SelectedOption="model.DurationType">
                <MudRadio Disabled=true Option="@(DurationType.WEEKLY)">Weekly</MudRadio>
                <MudRadio Disabled=true Option="@(DurationType.MONTHLY)">Monthly</MudRadio>
                <MudRadio Disabled=true Option="@(DurationType.QUARTERLY)">Quarterly</MudRadio>
                <MudRadio Disabled=true Option="@(DurationType.YEARLY)">Yearly</MudRadio>
            </MudRadioGroup>
        </DialogContent>
        <DialogActions>
            <MudButton Class="ml-auto" Variant="Variant.Outlined" Color="Color.Error" OnClick="Cancel">Cancel</MudButton>
            <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Success">
                @if (isLoading)
                {
                    <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                }
                else
                {
                    <MudText>Save</MudText>
                }
            </MudButton>
        </DialogActions>
    </MudDialog>
</EditForm>

@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }
    [Parameter] public Budget parentBudget { get; set; }

    Model model = new Model();
    bool isLoading = false;

    protected override void OnAfterRender(bool firstRender)
    {
        model.Catagory = parentBudget.Catagory;
        model.DurationType = parentBudget.DurationType;
        this.StateHasChanged();
        base.OnAfterRender(firstRender);
    }

    public void Cancel()
    {
        MudDialog.Cancel();
    }

    public async Task SaveAsync()
    {
        try
        {
            isLoading = true;
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var currentUser = authState.User;

            int userID = int.Parse(currentUser.Claims.First(x => x.Type == ClaimTypes.NameIdentifier).Value);

            await BudgetRepository.Insert(new Budget()
            {
                Name = model.Name,
                Description = model.Description,
                Catagory = model.Catagory,
                Amount = model.Amount,
                UserID = userID,
                ParentBudgetID = parentBudget.BudgetID
            });

            this.snackbar.Add("Successfully added the sub budget.", Severity.Success);
            MudDialog.Close();
        }
        catch (Exception)
        {
            this.snackbar.Add($"An error occured saving the budget, please try again.", Severity.Error);
        }

        isLoading = false;
    }

    private class Model
    {
        public Model() { }

        public Model(Budget budget)
        {
            this.Name = budget.Name;
            this.Description = budget.Description;
            this.Catagory = budget.Catagory;
            this.Amount = budget.Amount;
            this.DurationType = budget.DurationType;
        }

        [Required]
        [MaxLength(80)]
        public string Name { get; set; }

        [MaxLength(1000)]
        public string Description { get; set; }

        public Catagory Catagory { get; set; }

        [Required]
        [Range(0.0, double.MaxValue, ErrorMessage = "Amount must be greater than 0.")]
        public double Amount { get; set; }

        [Required]
        public DurationType DurationType { get; set; }
    }
}
